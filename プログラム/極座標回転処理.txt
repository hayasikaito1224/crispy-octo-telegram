//===============================================================
// カメラの移動
//===============================================================
void CCamera::MoveCamera(void)
{
	CInputkeyboard *pKey = CManager::GetInstance()->GetKeyboard();
	CXInput *pGamePad = CManager::GetInstance()->GetXInput();

	//// 注視点の回転
	//if (pKey->GetPress(DIK_E) == true)
	//{
	//	m_rot.y += 0.01f;
	//	if (m_rot.y > D3DX_PI)
	//	{
	//		m_rot.y -= D3DX_PI;
	//	}

	//	m_posR.x = m_posV.x + sinf(m_rot.y)* m_fLong;
	//	m_posR.z = m_posV.z + cosf(m_rot.y)* m_fLong;
	//}

	//if (pKey->GetPress(DIK_Q) == true)
	//{
	//	m_rot.y += -0.01f;
	//	if (m_rot.y < -D3DX_PI)
	//	{
	//		m_rot.y = D3DX_PI;
	//	}

	//	m_posR.x = m_posV.x + sinf(m_rot.y)* m_fLong;
	//	m_posR.z = m_posV.z + cosf(m_rot.y)* m_fLong;
	//}
	//if (pKey->GetPress(DIK_R) == true)
	//{
	//	m_posR.y += 2.0f;
	//}
	//if (pKey->GetPress(DIK_F) == true)
	//{
	//	m_posR.y += -2.0f;
	//}

	//// 視点の回転
	//if (pKey->GetPress(DIK_C) == true)
	//{
	//	m_rot.y += -0.01f;
	//	if (m_rot.y < -D3DX_PI)
	//	{
	//		m_rot.y = D3DX_PI;
	//	}

	//	m_posV.x = m_posR.x - sinf(m_rot.y)* m_fLong;
	//	m_posV.z = m_posR.z - cosf(m_rot.y)* m_fLong;
	//}
	//if (pKey->GetPress(DIK_Z) == true)
	//{
	//	m_rot.y += 0.01f;
	//	if (m_rot.y > D3DX_PI)
	//	{
	//		m_rot.y -= D3DX_PI*2.01f;
	//	}

	//	m_posV.x = m_posR.x - sinf(m_rot.y)* m_fLong;
	//	m_posV.z = m_posR.z - cosf(m_rot.y)* m_fLong;
	//}
	//if (pKey->GetPress(DIK_T) == true)
	//{
	//	m_posV.y += 1.0f;
	//}
	//if (pKey->GetPress(DIK_G) == true)
	//{
	//	m_posV.y += -1.0f;
	//}

	//++++++++++++++++++++++++++++++//
	//			視点の回転			//
	//++++++++++++++++++++++++++++++//
	if (pGamePad->GetGamePad()->m_state.Gamepad.sThumbRX >= XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE)
	{
		m_rot.y += 0.04f;
		if (m_rot.y > D3DX_PI)
		{
			m_rot.y = -D3DX_PI;
		}
		//m_posV.x = m_posR.x - sinf(m_rot.y)* m_fLong;
		//m_posV.z = m_posR.z - cosf(m_rot.y)* m_fLong;
	}

	if (pGamePad->GetGamePad()->m_state.Gamepad.sThumbRX <= -XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE)
	{
		m_rot.y += -0.04f;
		if (m_rot.y < -D3DX_PI)
		{
			m_rot.y = D3DX_PI;
		}
		//m_posV.x = m_posR.x - sinf(m_rot.y)* m_fLong;
		//m_posV.z = m_posR.z - cosf(m_rot.y)* m_fLong;
	}
	if (pGamePad->GetGamePad()->m_state.Gamepad.sThumbRY >= XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE)
	{
		m_rot.x += -0.04f;
		if (m_rot.x < 0.0f)
		{
			m_rot.x = 0.0f;
		}
	}
	if (pGamePad->GetGamePad()->m_state.Gamepad.sThumbRY <= -XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE)
	{

		m_rot.x += 0.04f;
		if (m_rot.x > D3DX_PI)
		{
			m_rot.x = D3DX_PI;
		}
	}

	//++++++++++++++++++++++++++++//
	//		  カメラの移動	      //
	//++++++++++++++++++++++++++++//
	//左移動
	if (pKey->GetPress(DIK_A) == true)
	{		
		m_posV.x -= cosf(-m_rot.y) * 2.0f;
		m_posV.z -= sinf(-m_rot.y) * 2.0f;
		m_posR.x -= cosf(-m_rot.y) * 2.0f;
		m_posR.z -= sinf(-m_rot.y) * 2.0f;
	}

	//右移動
	if (pKey->GetPress(DIK_D) == true)
	{
		m_posV.x += cosf(-m_rot.y) * 2.0f;
		m_posV.z += sinf(-m_rot.y) * 2.0f;
		m_posR.x += cosf(-m_rot.y) * 2.0f;
		m_posR.z += sinf(-m_rot.y) * 2.0f;
	}

	//奥移動
	if (pKey->GetPress(DIK_W) == true)
	{
		m_posV.x += sinf(m_rot.y) * 2.0f;
		m_posV.z += cosf(m_rot.y) * 2.0f;
		m_posR.x += sinf(m_rot.y) * 2.0f;
		m_posR.z += cosf(m_rot.y) * 2.0f;
	}

	//手前移動
	if (pKey->GetPress(DIK_S) == true)
	{	
		m_posV.x -= sinf(m_rot.y) * 2.0f;
		m_posV.z -= cosf(m_rot.y) * 2.0f;
		m_posR.x -= sinf(m_rot.y) * 2.0f;
		m_posR.z -= cosf(m_rot.y) * 2.0f;
	}


}

//=============================================================================
// プレイヤーにカメラが追従する処理
//=============================================================================
void CCamera::SetPlayerCamera(CPlayer *pPlayer)
{
	m_posR = D3DXVECTOR3(pPlayer->GetPos().x, m_posR.y, pPlayer->GetPos().z);
	//m_posV.x = pPlayer->GetPos().x - sinf(m_rot.y)*m_fLong;
	//m_posV.z = pPlayer->GetPos().z - cosf(m_rot.y)*m_fLong;

	//視点の場所を注視点を元に移動
	m_posV.x = pPlayer->GetPos().x - CAMERA_DISTANCE * sinf(m_rot.x) * sinf(m_rot.y);
	m_posV.z = pPlayer->GetPos().z - CAMERA_DISTANCE * sinf(m_rot.x) * cosf(m_rot.y);
	m_posV.y = pPlayer->GetPos().y - CAMERA_DISTANCE * cosf(m_rot.x);
}